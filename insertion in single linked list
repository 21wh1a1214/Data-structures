include<stdio.h>
#include<stdlib.h>
typedef struct node{
        int data;
        struct node *next;
}node;
node *head = NULL;
node *temp = NULL;
node *getnode();
void display();
void insert_begi();
void insert_end();
void insert_at_k();
int length();
void delete_beg();
void delete_end();
void del_at_k();
void main() {
        int ch;
        int pos;
        while(1){
                printf("\n1.INSERT AT BEGINNING\n2.INSERT AT ENDING\n3.INSERT AT POSITION\n4.DELETE AT BEGINNING\n5.DELETE AT END\n6.DELETIN AT k \n7.DISPLAY\n8.FIND LENGTH\n9.EXIT");
                printf("\nENTER AN OPTION : ");
                scanf("%d",&ch);
        switch(ch){
                case 1: printf("Insertion at beginning : \n");
                        insert_begi();
                        break;
                case 2: printf("Insertion at ending :\n ");
                        insert_end();
                        break;
                case 3: printf("Insertion at certain pos : \n");
                        printf("Enter the position to insert : \n");
                        scanf("%d",&pos);
                        insert_at_k(pos);
                        break;
                case 4:printf("Deletion at begiining is done");
                       delete_beg();
                       break;
                case 5:printf("Deletion at ending  is done");
                       delete_end();
                       break;
                case 6: del_at_k();
                        printf("deletion is done");
                       break;
                case 7:if(head == NULL){
                               printf("enpty list");
                       }
                       else {
                               printf("Then given is ");
                                display();
                        }
                       break;
                case 8:if(head == NULL)
                               printf("Empty--list ,length is 0");
                       else {
                               length();
                       }
                       break;
                case 9:exit(0);
                }
        }
}
node *getnode() {
        node *new = (node *)malloc(sizeof(node));
        printf("Enter data : ");
        scanf("%d",&new->data);
        new -> next = NULL;
        return new;
}
void insert_begi() {
        node *new = getnode();
        if(head == NULL)
                temp = new;
        new -> next = head;
        head = new;
}
void insert_end() {
        node *new = getnode();
        if(head == NULL){
                head = temp = new;
        }
        else{
                temp -> next = new;
                temp = new;
        }
}
void insert_at_k(int k) {
        int i;
        node *new = getnode();
        temp = head;
        for(i=1;i<=k-1;i++){
                temp = temp -> next;
        }
                new -> next = temp -> next;
                temp -> next = new;
}
void display() {
        node *curr = head;
                while(curr != NULL ){
                printf("%d ,",curr->data);
                curr = curr -> next;
        }
}
int length() {
        int count = 1;
        temp = head;
        while(temp -> next != NULL) {
                count++;
                temp = temp -> next;
        }
        printf("LENGTH OF  NODE IS %d",count);
        return count;
}
void delete_beg() {
        node *temp1;
        temp1 = head;
        head = head -> next;
        temp1 -> next = NULL;
        free(temp1);
}
void delete_end() {
        node *temp1 = head;
        if(head == NULL){
                printf("\nEMPTY");
        }
        else if(head -> next == NULL) {
                printf("\nData deleted %d",head->data);
                head = NULL;
                temp = NULL;
                free(temp1);
        }
        else {
                node *t;
                while(temp1->next != NULL){
                        temp1 = temp1 -> next;
                        t = temp1->next;
                }
                temp1 -> next == NULL;
                temp =temp1;
                free(t);
        }
}
void del_at_k() {
        int i;
        int k;
        int n;
        node *curr=head;
        node *temp1;
        printf("Enter the position to delete: \n");
                           scanf("%d",&k);

        n = length();
        if(k == 1){
                delete_beg();
        }
        else if(k == n){
                delete_end();
        }
        else if((1 < k)&&(k < n)) {
                for(i=1;i<k-1;i++){
                        curr = curr ->next;
                        temp1 = curr -> next;
                        c }
                        free(temp1);
        }
        else{
                printf("INVALID");
        }
}
                                                                                                                            171,1         Bot

curr ->next = curr -> next -> next;
                                                                                                                            159,1-8       94%

                                                                                                            101,1-8       69%
                                                                                                                    94,1-8        47%

                                                                                                                    36,1-8        22%

                                                                                                    1,1           Top

